classdef NullModelAnalysisUnit
    % Holds and executes a single null model analysis, leveraging ConnectomeAnalysisRunner

    properties
        AnalysisRunner ConnectomeAnalysisRunner
        WiringPISimilarity
    end

    methods
        function obj = NullModelAnalysisUnit(randConnMat,randDomDef,randHoldoutOptions,origRunner)
            arguments
                randConnMat (:,:) logical
                randDomDef (:,:) logical
                randHoldoutOptions HoldoutParameters
                origRunner ConnectomeAnalysisRunner
            end
            origFactory = origRunner.Factory;
            newConnMat = ConnectionMatrix(randConnMat);
            newCrossInfo = copyCrossRegionInfo(origFactory.CrossRegionInformation);
            newCrossInfo.setDomainDefineMatrix(randDomDef); 
            nullConnRunner = ConnectomeAnalysisRunner(newConnMat,origFactory.GeneExpressionLevels,newCrossInfo, ...
                origRunner.PairGenerationOptions,origRunner.ReconstructionOptions,randHoldoutOptions);
            obj.AnalysisRunner = nullConnRunner;            
        end

        function obj = run(obj,options)
            arguments
                obj NullModelAnalysisUnit
                options.RngSeed = [];
            end
            if ~isempty(options.RngSeed)
                rng(options.RngSeed)
                disp()
            end
            % Set up and execute analysis using runner
            obj.AnalysisRunner = obj.AnalysisRunner.runAnalysis("ReconstructionStoreTag",false);
        end

        function obj = calculatePISimilarityScore(obj,refWiringPIPairs)
            arguments
                obj NullModelAnalysisUnit
                refWiringPIPairs WiringPIPairs
            end
            unitWiringPI = obj.AnalysisRunner.OverallModelAndResults.FullAnalysisModel.WiringPIPairsData;
            simScoreList = calculatePISimilarities(unitWiringPI,refWiringPIPairs);
            obj.WiringPISimilarity = simScoreList;
        end

        function fullDataCorrs = getFullDataCorrs(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            fullDataCorrs = obj.AnalysisRunner.OverallModelAndResults.FullAnalysisModel.CCAResultsData.r;
        end

        function fullDataAUCs = getFullDataAUC(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            fullDataAUCs = obj.AnalysisRunner.OverallModelAndResults.FullAnalysisModel.ReconstructionResultsData.AUC_ROC;
        end

        function holdoutTrainCorrs = getHoldoutTrainMeanCorrs(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            holdoutTrainCorrs = obj.AnalysisRunner.OverallModelAndResults.HoldoutSummary.TrainMeanCorrelation;
        end

        function holdoutTrainAUCs = getHoldoutTrainMeanAUC(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            holdoutTrainAUCs = obj.AnalysisRunner.OverallModelAndResults.HoldoutSummary.TrainMeanAUC_ROC;
        end

        function holdoutTestCorrs = getHoldoutTestMeanCorrs(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            holdoutTestCorrs = obj.AnalysisRunner.OverallModelAndResults.HoldoutSummary.TestMeanCorrelation;
        end

        function holdoutTestAUCs = getHoldoutTestMeanAUC(obj)
            arguments
                obj NullModelAnalysisUnit
            end
            holdoutTestAUCs = obj.AnalysisRunner.OverallModelAndResults.HoldoutSummary.TestMeanAUC_ROC;
        end
        



    end
end