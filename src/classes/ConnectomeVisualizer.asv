classdef ConnectomeVisualizer
    % ConnectomeVisualizer
    % Static methods for visualizing connectome-related data structures.

    methods (Static)

        function [hAx,hIm] = plotConnectomeMatrixWithMask(connectionMatrixObj, crossRegionInfo,options)
            % Plot the connection matrix with source and target region labels.
            arguments(Input)
                connectionMatrixObj ConnectionMatrix
                crossRegionInfo CrossRegionInformation
                options.ParentAxes = []; % must be 'matlab.graphics.axis.Axes' or empty
                options.DataType = "Connections"; % or "Distance"
                options.LabelName = "off"; % or "on"
                options.AnyMatrix = [];
            end
            % Get axes
            hAx = getOrCreateAxes(options.ParentAxes);
            % make image
            switch options.DataType
                case "Connections"
                    imMat = connectionMatrixObj.Matrix;
                case "Distance"
                    imMat = crossRegionInfo.DistanceMatrix;
                case "DomainDefine"
                    imMat = crossRegionInfo.DomainDefineMatrix;
            end
            if ~isempty(options.AnyMatrix)
                imMat = options.AnyMatrix;
            end

            imMat = makeMaskedMatrix(crossRegionInfo,imMat);
            hIm = imagesc(hAx,imMat);
            hIm.Parent.Color = 'k';
            hIm.AlphaData = ~(isnan(imMat));
            [MRNamesSource,MRInitialIndexListSource,~] = getMajorRegionInfo(crossRegionInfo.SourceRegionInfo);
            [MRNamesTarget,MRInitialIndexListTarget,~] = getMajorRegionInfo(crossRegionInfo.TargetRegionInfo);
            axis square
            xticks(MRInitialIndexListTarget - 0.5);
            xticklabels([]);
            %setRegionNameLabel(obj.BrainRegionInformationSource,"XY","Y","LabelName",options.TickLabel);
            yticks(MRInitialIndexListSource - 0.5);
            yticklabels([]);
            if options.LabelName == "on"
                xticklabels(MRNamesTarget);
                yticklabels(MRNamesSource);
            end            
        end

        function [] = plotConnectomeMatrix_withMRColorLabels(connectionMatrixObj, crossRegionInfo,options)
            arguments(Input)
                connectionMatrixObj ConnectionMatrix
                crossRegionInfo CrossRegionInformation
                options.DataType = "Connections"; % or "Distance"
                options.AnyMatrix = [];
            end
            mainAx = axes('Position',[0.1 0.1 0.8 0.8],'OuterPosition',[0 0 1 1]);
            [mainAx,hIm] = ConnectomeVisualizer.plotConnectomeMatrixWithMask(connectionMatrixObj, crossRegionInfo, ...
                "ParentAxes",mainAx,"DataType",options.DataType,"AnyMatrix",options.AnyMatrix);
            mainAx.Position = [0.1 0.1 0.8 0.8];
            mainAx.PlotBoxAspectRatio = [1 1 1];
             % ---add MR color labels---
            gapWidth = 0.01;
            barWidth = 0.01;
            hold on
            leftAx = setMRColorLabel(crossRegionInfo.SourceRegionInfo);
            hold on
            underAx = setMRColorLabel(crossRegionInfo.TargetRegionInfo,'Vertical','off');
            leftAx.Position = [mainAx.Position(1) - gapWidth, ...
                           mainAx.Position(2), ...
                           barWidth, ...
                           mainAx.Position(4)];
            underAx.Position = [mainAx.Position(1), ...
                           mainAx.Position(2) - gapWidth, ...
                           mainAx.Position(3), ...
                           barWidth];
            linkaxes([mainAx,leftAx],'y');
            linkaxes([mainAx,underAx],'x');
        end
        

        function plotMajorRegionStats(connectionMatrixObj, crossRegionInfo)
            % Plot a bar chart of the number of connections per Major Region.
            % (This is a placeholder: logic should be filled in based on your data structure.)

            % Example: Count connections by source Major Region
            
        end

        function [hAx] = heatmapProjectionFeaturesBetweenMRs(connectionMatrixObj, crossRegionInfo,options)
            % Plot the connection matrix with source and target region labels.
            arguments(Input)
                connectionMatrixObj ConnectionMatrix
                crossRegionInfo CrossRegionInformation
                options.ParentAxes = []; % must be 'matlab.graphics.axis.Axes' or empty
                options.LabelName = "off"; % or "on"
                options.AnyMatrix = [];
            end          
            hAx = getOrCreateAxes(options.ParentAxes); % Get axes

            [connNumberMat,connDensityMat] = ConnectomeVisualizer.getCrossMajorRegionInformation(connectionMatrixObj,crossRegionInfo);
            tickLabelsSource = crossRegionInfo.SourceRegionInfo.getMajorRegionInfo;
            tickLabelsTarget = crossRegionInfo.TargetRegionInfo.getMajorRegionInfo;
            switch options.Feature
                case "counts"
                    h = heatmap(tickLabelsTarget,tickLabelsSource,connNumberMat);
                    titleName = "projection counts";
                case "density"
                    h = heatmap(tickLabelsTarget,tickLabelsSource,connDensityMat);
                    titleName = "projection density";
            end
        end

        function [crossMRConnNumberMat,crossMRConnDensityMat] = getCrossMajorRegionInformation(connectionMatrixObj, crossRegionInfo)
            arguments(Input)
               connectionMatrixObj ConnectionMatrix
               crossRegionInfo CrossRegionInformation
            end
            origMat = connectionMatrixObj.Matrix;
            domDefMat = crossRegionInfo.DomainDefineMatrix;
            sourceMRList = unique(crossRegionInfo.SourceRegionInfo.getMajorRegions,"stable");
            targetMRList = unique(crossRegionInfo.TargetRegionInfo.getMajorRegions,"stable");
            NMRsrc = numel(sourceMRList);
            NMRtgt = numel(targetMRList);
            crossMRConnNumberMat = zeros(NMRsrc,NMRtgt);
            crossMRConnDensityMat = zeros(NMRsrc,NMRtgt);
            for i = 1:NMRsrc
                srcMajor = sourceMRList(i,1);
                for j = 1:NMRtgt
                    tgtMajor = targetMRList(j,1);
                    srcIdx = find(crossRegionInfo.SourceRegionInfo.getMajorRegions == srcMajor);
                    tgtIdx = find(crossRegionInfo.TargetRegionInfo.getMajorRegions == tgtMajor);
                    subMat = origMat(srcIdx, tgtIdx);
                    subDomDef = domDefMat(srcIdx,tgtIdx);
                    sumRegionPair = sum(subDomDef,'all','omitmissing');
                    sumConnection = sum(subMat,'all','omitmissing');
                    if sumRegionPair == 0
                        crossMRConnNumberMat(i,j) = NaN;
                        crossMRConnDensityMat(i,j) = NaN;
                    else
                        crossMRConnNumberMat(i,j) = sumConnection;
                        crossMRConnDensityMat(i,j) = sumConnection/sumRegionPair;
                    end
                end
            end
                   
        end

    end
end
